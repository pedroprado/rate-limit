// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "notification-service/src/core/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// Save provides a mock function with given fields: ctx, notification
func (_m *NotificationRepository) Save(ctx context.Context, notification entity.Notification) (*entity.Notification, error) {
	ret := _m.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *entity.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Notification) (*entity.Notification, error)); ok {
		return rf(ctx, notification)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Notification) *entity.Notification); ok {
		r0 = rf(ctx, notification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Notification) error); ok {
		r1 = rf(ctx, notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
